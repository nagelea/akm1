name: Daily Database Backup

on:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点执行
  workflow_dispatch:  # 允许手动触发

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Create backup using Supabase API
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          # 创建备份目录
          mkdir -p backups
          
          # 生成备份文件名（包含日期）
          BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="backups/database_backup_${BACKUP_DATE}.json"
          
          # 创建备份脚本
          cat > backup_script.js << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          
          const supabaseUrl = process.env.SUPABASE_URL;
          const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
          const backupFile = process.argv[2];
          
          const supabase = createClient(supabaseUrl, supabaseKey);
          
          async function backup() {
            try {
              // 获取所有表的数据
              const tables = ['leaked_keys', 'leaked_keys_sensitive', 'admin_users', 'daily_stats']; // 备份主要表
              const backup = {};
              
              for (const table of tables) {
                const { data, error } = await supabase
                  .from(table)
                  .select('*');
                
                if (error) {
                  console.error(`Error backing up ${table}:`, error);
                  // 对于不存在的表，继续备份其他表
                  backup[table] = [];
                } else {
                  backup[table] = data || [];
                  console.log(`Backed up ${(data || []).length} records from ${table}`);
                }
              }
              
              // 添加备份元数据
              backup._metadata = {
                timestamp: new Date().toISOString(),
                version: '2.0.0',
                tables: Object.keys(backup).filter(k => k !== '_metadata'),
                total_records: Object.values(backup).reduce((sum, arr) => sum + (Array.isArray(arr) ? arr.length : 0), 0)
              };
              
              // 保存备份
              fs.writeFileSync(backupFile, JSON.stringify(backup, null, 2));
              console.log(`Backup saved to ${backupFile}`);
              console.log(`Total records backed up: ${backup._metadata.total_records}`);
              
            } catch (error) {
              console.error('Backup failed:', error);
              process.exit(1);
            }
          }
          
          backup();
          EOF
          
          # 安装依赖
          npm install @supabase/supabase-js
          
          # 执行备份
          node backup_script.js "$BACKUP_FILE"
          
          # 压缩并加密备份文件
          gzip "$BACKUP_FILE"
          
          # 使用GPG对称加密保护备份文件
          echo "${{ secrets.BACKUP_ENCRYPTION_PASSWORD }}" | gpg --batch --yes --passphrase-fd 0 --symmetric --cipher-algo AES256 --output "${BACKUP_FILE}.gz.gpg" "${BACKUP_FILE}.gz"
          
          # 删除原始未加密文件
          rm "${BACKUP_FILE}.gz"
          
          echo "BACKUP_FILE=${BACKUP_FILE}.gz.gpg" >> $GITHUB_ENV
          
      - name: Clean old backups (keep only 7 days)
        run: |
          # 删除7天前的备份文件
          find backups/ -name "database_backup_*.json.gz.gpg" -mtime +7 -delete || true
          
      - name: Commit and push backup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加备份文件到git
          git add backups/
          
          # 检查是否有变更
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add database backup $(date +%Y-%m-%d)"
            git push
          fi
          
      - name: Upload backup as artifact
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-$(date +%Y%m%d)
          path: ${{ env.BACKUP_FILE }}
          retention-days: 7